package com.account.service;

import com.account.bean.CXUser;


public interface ICXService {
	// 还有这个命名啊  什么叫做toupdate  你这是修改密码 to个鸡毛啊？
	// 不说用英文  你好歹用中文拼音啊?...你要是不知道英文可以百度啊。
	// 我知道你郁闷啥 你不知道应该如何命名为何有这个service。我说了
	// controller才是中转。真正的业务 是service 
	/**
	 * 比如我们前台页面 因为是分好多步录入数据。然后不管多少步，最终是不是有一个业务操作
	 * 就是比如这个修改密码？恩是啊 那么这个修改密码就是业务了。虽然他在controller里面也一样的命名。
	 * 不影响啊。知道吗？0.0比如  controller里面 有个方法 就是 处理修改密码的，然后在那个里面 调用你这个
	 * 不影响啊。恩 就好像。那些外面推销的 ，对外说 不都是说自己有技术？然后那些老头儿不都是说 他们就是搞这个技术的
	 * 然而呢？他们只是接单 接到了 丢给技术人员去做，技术做完后 回给推销的。推销再给老头儿。老头关心你后面技术的吗？
	 * 不关心。是啊 controller 就相当于推销的 他只是接受数据然后 丢给专业的处理 也就是service 然后 获得结果
	 * 再返回去。对于他而言 他也是修改密码。对于service而已 不也是？恩。所以不冲突。别觉得 为何controller命名了
	 * 我service还重新一次。你要知道这是三层开发 。功能分开。恩
	 * 这个地方就命名成updatePassword 其实某种意义上来说 他命名和调用他的controller一般都是相同的。除非那个controller
	 * 像我说的那样 要调用多个service.懂吗？恩。他们erp软件 .几乎  controler对应一个service对应一个dao。。。。。名字
	 * 返回值，参数都一样。。。搜嘎。所以你会觉得 沃日  为何要分层呢？你会有这个疑问。我说这么多就是给你打消这个疑问。
	 * 因为比如 大的公司 ，注册的时候 注册的并不是一个东西，而是好多地方的东西。他可能会调用好多东西。
	 * 比如qq会给你开邮箱（估计会调用创建邮箱的接口）,开微博（微博的接口）之类的。所以那时候controller和service相同？肯定不行了
	 * 对于qq的controler 估计是  register。然后 开邮箱肯定是 create 因为create是创建，然后邮箱是Email。
	 * 所以你要知道  。controler里面具体要做哪些业务。对于你这个修改密码的controller。里面也就一个修改密码了。
	 * 所以就是修改密码的service。恩然后这个时候 你controller里面是 修改密码  service 还是 修改密码。
	 * 我上个厕所 稍等。。。我正好也上了个厕所。。我来了。
	 * @param cx
	 * @return
	 */
	int updatePassword(CXUser cx);
	
	boolean register(CXUser cx);
	
	CXUser findCXByAccount(String account);
	
	CXUser findCXBySession(String account ,String password);
	
	CXUser findCXById(Long id);
	// 用户一般 都舍不得删除的 对于业务层来说。一般 用户都不删除。于是业务层不提供这个接口。
	// 但是dao层 呢？是不是也要删除 ？0.0 你想想？ dao层提供还是不提供删除方法？业务层不提供 到层还会提供么？
	// 所以你三层理解不深。肯定要提供啊。对于dao层 他管你什么业务不业务 。对于它而言，就是增删改查。
	// 你要和数据库打交道 ，那我就给你打通，你要操作一个表。那我就给你增删改查方法。至于你用还是不用
	// 关我鸡毛事儿？懂了  你说的是 路都有 走不走是业务自己的事。同样。controller 里面用不用我的service 
	// 和我service层也没有鸡毛事儿。0.0 也就是说 大公司。可以通过控制service层 来控制整个公司业务走向。
	// 比如他们公司 不是还加一个consumer层吗？ consumer其实就是去任意组合service而已。就是先调用这个service
	// 然后调用那个 产生一种定向结果。以供controller调用。其实说到这里 也就是说。controller要干嘛
	// 先看service有没有相应功能，不然就新加service。举例子吧。你现在要创建一个车享账号。但是我们账号呢
	// 必须要有车子信息。没有就不行。那么 你是不是要调用车子的相关service去新建啊 或者修改啊 或者查询啊 之类的接口
	// ？恩。如果没有 就得新加。有 就在controller里面调用就是。但是对于我注册这个账号的service而言
	// 他需要关心你有车子没车子？不需要。所以他们是同级。提供好接口。别人调用就是了。这就是之所以要分层。
	// 假设没有service层。你是不是直接调用的dao？？恩。然后对于controller而言 肯定有个注册的功能或者方法
	// 然后你是不是做车子的时候 还得新加车子的功能。但是这些功能 都写在controller里面 合适？不乱吗？肯定不行啊
	// 然后就想着 提成工具类。但是假如 我们公司 另外的一个项目要用它  是不是还得复制过去？...然后 假设复制过去了
	// 以后要是修改了 某个方法。是不是要修改多个地方？所以就出现了接口。所以大家都用这个接口。实现类都是一个。恩
}
